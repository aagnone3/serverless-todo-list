service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_S3_BUCKET: aagnone-todos
    TODOS_TABLE: todos
    TODOS_TABLE_INDEX_NAME: todos_index
    CONNECTIONS_TABLE: todos-connections-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: aagnone-serverless-udagram-thumbnail-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'

custom:

  warmup:
    enabled: false
    name: 'warm-up-function'
    payload:
      isWarmup: true
    concurrency: 1
    
  todosS3BucketArn: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}
  todosTopicName: todosTopic-${self:provider.stage}
  todosTableArn: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  todosTableIndexArn: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_TABLE_INDEX_NAME}
  connectionsTableArn: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo List Manager
        description: Serverless application for a Todo list manager
    models:
      - name: CreateRequest
        contentType: application/json
        schema: ${file(src/validators/createTodoRequest.json)}
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(src/validators/updateTodoRequest.json)}

  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      seed: true
    stages:
      - dev

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${self:custom.todosTableIndexArn}
      
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: ${self:custom.connectionsTableArn}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: ${self:custom.connectionsTableArn}
          
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create a new todo item
            requestModels:
              'application/json': CreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.todosTableArn}

  SendUploadNotifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.todosTopicName}
          topicName: ${self:custom.todosTopicName}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a todo item
            description: Update a todo item
            requestModels:
              'application/json': UpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: ${self:custom.todosTableArn}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: ${self:custom.todosTableArn}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          -  dynamodb:UpdateItem
        Resource: ${self:custom.todosTableArn}

resources:
  Resources:

    TodosTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Todos bucket topic
        TopicName: ${self:custom.todosTopicName}

    TodosTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: sns:Publish
              Resource:
                !Ref TodosTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: ${self:custom.todosS3BucketArn}
        Topics:
          - !Ref TodosTopic

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_TABLE_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref TodosBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref TodosTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: ${self:custom.todosS3BucketArn}
        Topics:
          - !Ref TodosTopic

    TodosBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref TodosTopic
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'RequestBodyValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false